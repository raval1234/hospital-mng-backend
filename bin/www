#!/usr/bin/env node
import http from "http";
import mongoose from "mongoose";
import config from "../config/config";
const debug = require("debug")("hospital-management-backend");
// import { createAdmin } from '../config/admin';

let dbURL = process.env.MONGODB_URL || config.mongoURL;
export const jwtSecret = process.env.JWTSECRET || config.jwtSecret;
export const expiresIn = process.env.EXPIRESIN || config.expiresIn;

export const mailchimp_email =
  process.env.MAILCHIMP_EMAIL || config.mailchimp_email;
export const mailchimp_api_key =
  process.env.MAILCHIMP_API_KEY || config.mailchimp_api_key;

mongoose
  .connect(dbURL, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useCreateIndex: true,
    poolSize: 30,
    useUnifiedTopology: true,
    socketTimeoutMS: 10000,
  })
  .then(async () => {
    console.log("database connected successfully");
  });

/**
 * Listen on provided port, on all network interfaces.
 */
const app = require("../app");
const port = process.env.PORT || config.env.PORT;
const server = http.createServer(app);

server.listen(port, () => {
  console.log(`server started on port ${port}`);
});

server.on("error", onError);
server.on("listening", onListening);



/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
